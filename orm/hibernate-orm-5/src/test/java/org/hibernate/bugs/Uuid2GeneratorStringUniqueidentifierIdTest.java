package org.hibernate.bugs;

import static org.assertj.core.api.Assertions.assertThat;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

import org.hibernate.entities.FooEntity;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

/**
 * This test case tries to show an issue that was observed on MS SQL Server in
 * versions 11.x and 12.x.
 * 
 * H2 fails to properly simulate an MS SQL Servers behaviour even with
 * 'MODE=MSSQLServer'.
 * 
 * @author Ken Schosinsky
 */
public class Uuid2GeneratorStringUniqueidentifierIdTest {

    private EntityManagerFactory entityManagerFactory;

    @Before
    public void init() {
        entityManagerFactory = Persistence.createEntityManagerFactory("FooPersistenceUnit");
    }

    @After
    public void destroy() {
        entityManagerFactory.close();
    }

    /**
     * This test fails because H2 fails to properly simulate MS SQL Server 11.x
     * and/or 12.x.
     * 
     * The following behaviour was tested with an @ElementCollection of type
     * Map<String, String>, but it was also seen observed with List<Embeddable> and
     * List<BarEntity>. For simplicity's sake the collection in FooEntity has been
     * changed to a Set<String>.
     * 
     * A String field with uuid2 generator retrieves java.util.UUID#toString as its
     * value, which happens to be lower case. When this lower case id is used to
     * fetch the entity in another transaction, the returned entity has an upper
     * case version of the id. This seems to be due to the UNIQUEIDENTIFIER column
     * type which H2 fails to simulate properly.
     * 
     * When the element collection in FooEntity is lazily loaded (or eagerly,
     * doesn't matter), it's owner looked up in a Map (1) using EntityKey, which in
     * the case of the owner contains the upper case id, whereas the EntityKey of
     * the collection holds the lower case one, so the owner cannot be found for
     * that collection instance. The result is an empty collection even if values
     * have been successfully fetched from the database (going by debugging and
     * org.hibernate.type trace logs).
     * 
     * (1) happens in
     * CollectionLoadContext#getLoadingCollection(CollectionPersister,
     * Serializable), calling StatefulPersistenceContext#getEntity(EntityKey)
     */
    @Test
    public void testStringUuidCollectionFetching() throws Exception {
        EntityManager entityManager = entityManagerFactory.createEntityManager();

        String id = createEntity(entityManager);

        // assert generated id is lower case as generated by uuid2
        assertThat(id).isNotNull().isLowerCase();
        
        fetchWithId("fetched with upper case id as its returned by the database", entityManager, id.toUpperCase());
        fetchWithId("fetched with lower case id as generated by uuid2", entityManager, id);

        entityManager.close();
    }

    private String createEntity(EntityManager entityManager) {
        entityManager.getTransaction().begin();

        // create entity with three entries in fooValues
        FooEntity entity = new FooEntity();
        entity.getFooValues().add("one");
        entity.getFooValues().add("two");
        entity.getFooValues().add("three");

        // persist entity
        entityManager.persist(entity);

        // commit transaction and clear session
        entityManager.getTransaction().commit();
        entityManager.clear();

        // return generated id for further use
        return entity.getId();
    }

    private void fetchWithId(String description, EntityManager entityManager, String id) {
        entityManager.getTransaction().begin();

        // fetch entity with lower case id generated by uuid2
        FooEntity entity = entityManager.find(FooEntity.class, id);
        assertThat(entity).isNotNull();

        // assert inserted fooValues has size 3
        assertThat(entity.getFooValues()).as(description).hasSize(3);

        entityManager.getTransaction().commit();
    }

}
